import {writeFile} from "fs/promises";
import Matrix, {inverse} from "ml-matrix";
import {CIE_ILLUMINANT_D65_2d_x, CIE_ILLUMINANT_D65_2d_y} from "./src/illuminants";
import {toCIE1931XYZXFromCIE1931xyY, toCIE1931XYZZFromCIE1931xyY} from "./src/conversions/cie1931xyy";
import {
    PRIMARY_ADOBE_RGB_BLUE_x,
    PRIMARY_ADOBE_RGB_BLUE_Y,
    PRIMARY_ADOBE_RGB_BLUE_y,
    PRIMARY_ADOBE_RGB_GREEN_x,
    PRIMARY_ADOBE_RGB_GREEN_Y,
    PRIMARY_ADOBE_RGB_GREEN_y,
    PRIMARY_ADOBE_RGB_RED_x,
    PRIMARY_ADOBE_RGB_RED_Y,
    PRIMARY_ADOBE_RGB_RED_y,
    PRIMARY_DISPLAY_P3_BLUE_x,
    PRIMARY_DISPLAY_P3_BLUE_y,
    PRIMARY_DISPLAY_P3_BLUE_Y,
    PRIMARY_DISPLAY_P3_GREEN_x,
    PRIMARY_DISPLAY_P3_GREEN_y,
    PRIMARY_DISPLAY_P3_GREEN_Y,
    PRIMARY_DISPLAY_P3_RED_x,
    PRIMARY_DISPLAY_P3_RED_y,
    PRIMARY_DISPLAY_P3_RED_Y,
    PRIMARY_SRGB_BLUE_x,
    PRIMARY_SRGB_BLUE_Y,
    PRIMARY_SRGB_BLUE_y,
    PRIMARY_SRGB_GREEN_x,
    PRIMARY_SRGB_GREEN_Y,
    PRIMARY_SRGB_GREEN_y,
    PRIMARY_SRGB_RED_x,
    PRIMARY_SRGB_RED_Y,
    PRIMARY_SRGB_RED_y,
} from "./src/primaries";

const constants = new Map<string, any>();

const addSquareMatrix = (id: string, matrix: number[]) => {
    id = id.toUpperCase();

    const n = Math.sqrt(matrix.length);

    for(let row = 0; row < n; row++) {
        for(let col = 0; col < n; col++) {
            constants.set(`MATRIX_${id}_${row}_${col}`, matrix[row * n + col]);
        }
    }
};

const calculateD65LinearRGBToCIE1931XYZMatrix = (
    red_x: number,
    red_y: number,
    red_Y: number,
    green_x: number,
    green_y: number,
    green_Y: number,
    blue_x: number,
    blue_y: number,
    blue_Y: number,
) => {
    const illuminantCIEx = CIE_ILLUMINANT_D65_2d_x;
    const illuminantCIEy = CIE_ILLUMINANT_D65_2d_y;

    const illuminantY = 1;
    const illuminantX = toCIE1931XYZXFromCIE1931xyY(illuminantCIEx, illuminantCIEy, illuminantY);
    const illuminantZ = toCIE1931XYZZFromCIE1931xyY(illuminantCIEx, illuminantCIEy, illuminantY);

    const red_X = toCIE1931XYZXFromCIE1931xyY(
        red_x,
        red_y,
        red_Y,
    );
    const red_Z = toCIE1931XYZZFromCIE1931xyY(
        red_x,
        red_y,
        red_Y,
    );

    const green_X = toCIE1931XYZXFromCIE1931xyY(
        green_x,
        green_y,
        green_Y,
    );
    const green_Z = toCIE1931XYZZFromCIE1931xyY(
        green_x,
        green_y,
        green_Y,
    );

    const blue_X = toCIE1931XYZXFromCIE1931xyY(
        blue_x,
        blue_y,
        blue_Y,
    );
    const blue_Z = toCIE1931XYZZFromCIE1931xyY(
        blue_x,
        blue_y,
        blue_Y,
    );

    const primaries = new Matrix([
        [red_X, red_Y, red_Z],
        [green_X, green_Y, green_Z],
        [blue_X, blue_Y, blue_Z],
    ]).transpose();

    const primariesInverse = inverse(primaries);

    const scaling = primariesInverse.mmul(new Matrix([
        [illuminantX],
        [illuminantY],
        [illuminantZ],
    ]));

    return primaries.mmul(new Matrix([
        [scaling.get(0, 0), 0, 0],
        [0, scaling.get(1, 0), 0],
        [0, 0, scaling.get(2, 0)],
    ]));
};

const linearSRGBToCIE1931XYZMatrix = calculateD65LinearRGBToCIE1931XYZMatrix(
    PRIMARY_SRGB_RED_x,
    PRIMARY_SRGB_RED_y,
    PRIMARY_SRGB_RED_Y,
    PRIMARY_SRGB_GREEN_x,
    PRIMARY_SRGB_GREEN_y,
    PRIMARY_SRGB_GREEN_Y,
    PRIMARY_SRGB_BLUE_x,
    PRIMARY_SRGB_BLUE_y,
    PRIMARY_SRGB_BLUE_Y,
);

addSquareMatrix("CIE_1931_XYZ_FROM_LINEAR_SRGB", linearSRGBToCIE1931XYZMatrix.to1DArray());
addSquareMatrix("LINEAR_SRGB_FROM_CIE_1931_XYZ", inverse(linearSRGBToCIE1931XYZMatrix).to1DArray());

const linearAdobeRGBToCIE1931XYZMatrix = calculateD65LinearRGBToCIE1931XYZMatrix(
    PRIMARY_ADOBE_RGB_RED_x,
    PRIMARY_ADOBE_RGB_RED_y,
    PRIMARY_ADOBE_RGB_RED_Y,
    PRIMARY_ADOBE_RGB_GREEN_x,
    PRIMARY_ADOBE_RGB_GREEN_y,
    PRIMARY_ADOBE_RGB_GREEN_Y,
    PRIMARY_ADOBE_RGB_BLUE_x,
    PRIMARY_ADOBE_RGB_BLUE_y,
    PRIMARY_ADOBE_RGB_BLUE_Y,
);

addSquareMatrix("CIE_1931_XYZ_FROM_LINEAR_ADOBE_RGB", linearAdobeRGBToCIE1931XYZMatrix.to1DArray());
addSquareMatrix("LINEAR_ADOBE_RGB_FROM_CIE_1931_XYZ", inverse(linearAdobeRGBToCIE1931XYZMatrix).to1DArray());

const matrixToCIE1931XYZFromLinearDisplayP3 = calculateD65LinearRGBToCIE1931XYZMatrix(
    PRIMARY_DISPLAY_P3_RED_x,
    PRIMARY_DISPLAY_P3_RED_y,
    PRIMARY_DISPLAY_P3_RED_Y,
    PRIMARY_DISPLAY_P3_GREEN_x,
    PRIMARY_DISPLAY_P3_GREEN_y,
    PRIMARY_DISPLAY_P3_GREEN_Y,
    PRIMARY_DISPLAY_P3_BLUE_x,
    PRIMARY_DISPLAY_P3_BLUE_y,
    PRIMARY_DISPLAY_P3_BLUE_Y,
);

addSquareMatrix("CIE_1931_XYZ_FROM_LINEAR_DISPLAY_P3", matrixToCIE1931XYZFromLinearDisplayP3.to1DArray());
addSquareMatrix("LINEAR_DISPLAY_P3_FROM_CIE_1931_XYZ", inverse(matrixToCIE1931XYZFromLinearDisplayP3).to1DArray());


await writeFile("./src/conversions/generated-constants.ts", "// This file was automatically generated by precalculate.ts in the root of the repo." + constants
    .entries()
    .map(([id, value]) => `export const ${id} = ${JSON.stringify(value)};`)
    .reduce((a, b) => `${a}\n${b}`, ""));
