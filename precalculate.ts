import {writeFile} from "fs/promises";
import Matrix, {inverse} from "ml-matrix";

import {
    BT_709_2_SRGB_BLUE_x,
    BT_709_2_SRGB_BLUE_Y,
    BT_709_2_SRGB_BLUE_y,
    BT_709_2_SRGB_GREEN_x,
    BT_709_2_SRGB_GREEN_Y,
    BT_709_2_SRGB_GREEN_y,
    BT_709_2_SRGB_RED_x,
    BT_709_2_SRGB_RED_Y,
    BT_709_2_SRGB_RED_y,
    CIE_ILLUMINANT_D65_2d_x,
    CIE_ILLUMINANT_D65_2d_y,
    toCIE1931XYZXFromCIE1931xyY,
    toCIE1931XYZZFromCIE1931xyY,
} from "./src";

const constants = new Map<string, any>();

const addSquareMatrix = (id: string, matrix: number[]) => {
    id = id.toUpperCase();

    const n = Math.sqrt(matrix.length);

    for(let row = 0; row < n; row++) {
        for(let col = 0; col < n; col++) {
            constants.set(`MATRIX_${id}_${row}_${col}`, matrix[row * n + col]);
        }
    }
};

const calculateSRGBToCIE1931XYZMatrix = () => {
    const illuminantCIEx = CIE_ILLUMINANT_D65_2d_x;
    const illuminantCIEy = CIE_ILLUMINANT_D65_2d_y;

    const illuminantY = 1;
    const illuminantX = toCIE1931XYZXFromCIE1931xyY(illuminantCIEx, illuminantCIEy, illuminantY);
    const illuminantZ = toCIE1931XYZZFromCIE1931xyY(illuminantCIEx, illuminantCIEy, illuminantY);

    const sRGBRedX = toCIE1931XYZXFromCIE1931xyY(
        BT_709_2_SRGB_RED_x,
        BT_709_2_SRGB_RED_y,
        BT_709_2_SRGB_RED_Y,
    );
    const sRGBRedY = BT_709_2_SRGB_RED_Y;
    const sRGBRedZ = toCIE1931XYZZFromCIE1931xyY(
        BT_709_2_SRGB_RED_x,
        BT_709_2_SRGB_RED_y,
        BT_709_2_SRGB_RED_Y,
    );

    const sRGBGreenX = toCIE1931XYZXFromCIE1931xyY(
        BT_709_2_SRGB_GREEN_x,
        BT_709_2_SRGB_GREEN_y,
        BT_709_2_SRGB_GREEN_Y,
    );
    const sRGBGreenY = BT_709_2_SRGB_GREEN_Y;
    const sRGBGreenZ = toCIE1931XYZZFromCIE1931xyY(
        BT_709_2_SRGB_GREEN_x,
        BT_709_2_SRGB_GREEN_y,
        BT_709_2_SRGB_GREEN_Y,
    );

    const sRGBBlueX = toCIE1931XYZXFromCIE1931xyY(
        BT_709_2_SRGB_BLUE_x,
        BT_709_2_SRGB_BLUE_y,
        BT_709_2_SRGB_BLUE_Y,
    );
    const sRGBBlueY = BT_709_2_SRGB_BLUE_Y;
    const sRGBBlueZ = toCIE1931XYZZFromCIE1931xyY(
        BT_709_2_SRGB_BLUE_x,
        BT_709_2_SRGB_BLUE_y,
        BT_709_2_SRGB_BLUE_Y,
    );

    const primaries = new Matrix([
        [sRGBRedX, sRGBRedY, sRGBRedZ],
        [sRGBGreenX, sRGBGreenY, sRGBGreenZ],
        [sRGBBlueX, sRGBBlueY, sRGBBlueZ],
    ]).transpose();

    const primariesInverse = inverse(primaries);

    const scaling = primariesInverse.mmul(new Matrix([
        [illuminantX],
        [illuminantY],
        [illuminantZ],
    ]));

    return primaries.mmul(new Matrix([
        [scaling.get(0, 0), 0, 0],
        [0, scaling.get(1, 0), 0],
        [0, 0, scaling.get(2, 0)],
    ]));
};

addSquareMatrix("CIE_1931_XYZ_FROM_LINEAR_SRGB", calculateSRGBToCIE1931XYZMatrix().to1DArray());
addSquareMatrix("LINEAR_SRGB_FROM_CIE_1931_XYZ", inverse(calculateSRGBToCIE1931XYZMatrix()).to1DArray());

await writeFile("./src/conversions/constants.ts", "// This file was automatically generated by precalculate.ts in the root of the repo." + constants
    .entries()
    .map(([id, value]) => `export const ${id} = ${JSON.stringify(value)};`)
    .reduce((a, b) => `${a}\n${b}`, ""));
