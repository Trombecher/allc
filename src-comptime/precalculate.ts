import {writeFile} from "fs/promises";
import Matrix, {inverse} from "ml-matrix";
import {toCIE1931XYZXFromCIE1931xyY, toCIE1931XYZZFromCIE1931xyY} from "../src/conversions/cie-1931-xyy";
import * as illuminants from "../src/illuminants";
import * as primaries from "../src/primaries";
import * as extractedMatrices from "../src/matrices/extracted";

const constants = new Map<string, any>();

const addSquareMatrix = (id: string, matrix: number[]) => {
    const n = Math.sqrt(matrix.length);

    for(let row = 0; row < n; row++) {
        for(let col = 0; col < n; col++) {
            constants.set(`MATRIX_${id}_${row}_${col}`, matrix[row * n + col]);
        }
    }
};

const calculateLinearRGBToCIE1931XYZMatrix = (
    red_x: number,
    red_y: number,
    green_x: number,
    green_y: number,
    blue_x: number,
    blue_y: number,
    illuminantx: number,
    illuminanty: number,
) => {
    const illuminantY = 1;
    const illuminantX = toCIE1931XYZXFromCIE1931xyY(illuminantx, illuminanty, illuminantY);
    const illuminantZ = toCIE1931XYZZFromCIE1931xyY(illuminantx, illuminanty, illuminantY);

    const red_X = toCIE1931XYZXFromCIE1931xyY(
        red_x,
        red_y,
        1,
    );
    const red_Z = toCIE1931XYZZFromCIE1931xyY(
        red_x,
        red_y,
        1,
    );

    const green_X = toCIE1931XYZXFromCIE1931xyY(
        green_x,
        green_y,
        1,
    );
    const green_Z = toCIE1931XYZZFromCIE1931xyY(
        green_x,
        green_y,
        1,
    );

    const blue_X = toCIE1931XYZXFromCIE1931xyY(
        blue_x,
        blue_y,
        1,
    );
    const blue_Z = toCIE1931XYZZFromCIE1931xyY(
        blue_x,
        blue_y,
        1,
    );

    const primaries = new Matrix([
        [red_X, 1, red_Z],
        [green_X, 1, green_Z],
        [blue_X, 1, blue_Z],
    ]).transpose();

    const primariesInverse = inverse(primaries);

    const scaling = primariesInverse.mmul(new Matrix([
        [illuminantX],
        [illuminantY],
        [illuminantZ],
    ]));

    return primaries.mmul(new Matrix([
        [scaling.get(0, 0), 0, 0],
        [0, scaling.get(1, 0), 0],
        [0, 0, scaling.get(2, 0)],
    ]));
};

const addRGBColorSpace = (
    name: string,
    illuminant: string
) => {
    const linearRGBToCIE1931XYZMatrix = calculateLinearRGBToCIE1931XYZMatrix(
        // @ts-ignore
        primaries[`PRIMARY_${name}_RED_x`],
        // @ts-ignore
        primaries[`PRIMARY_${name}_RED_y`],
        // @ts-ignore
        primaries[`PRIMARY_${name}_GREEN_x`],
        // @ts-ignore
        primaries[`PRIMARY_${name}_GREEN_y`],
        // @ts-ignore
        primaries[`PRIMARY_${name}_BLUE_x`],
        // @ts-ignore
        primaries[`PRIMARY_${name}_BLUE_y`],
        // @ts-ignore
        illuminants[`CIE_ILLUMINANT_${illuminant}_x`],
        // @ts-ignore
        illuminants[`CIE_ILLUMINANT_${illuminant}_x`],
    );

    addSquareMatrix(`CIE_1931_XYZ_FROM_LINEAR_${name}`, linearRGBToCIE1931XYZMatrix.to1DArray());
    addSquareMatrix(`LINEAR_${name}_FROM_CIE_1931_XYZ`, inverse(linearRGBToCIE1931XYZMatrix).to1DArray());
}

const addInverseMatrix = (
    to: string,
    from: string,
) => {
    const mat = Matrix.from1DArray(3, 3, [
        // @ts-ignore
        extractedMatrices[`MATRIX_${to}_FROM_${from}_0_0`],
        // @ts-ignore
        extractedMatrices[`MATRIX_${to}_FROM_${from}_0_1`],
        // @ts-ignore
        extractedMatrices[`MATRIX_${to}_FROM_${from}_0_2`],
        // @ts-ignore
        extractedMatrices[`MATRIX_${to}_FROM_${from}_1_0`],
        // @ts-ignore
        extractedMatrices[`MATRIX_${to}_FROM_${from}_1_1`],
        // @ts-ignore
        extractedMatrices[`MATRIX_${to}_FROM_${from}_1_2`],
        // @ts-ignore
        extractedMatrices[`MATRIX_${to}_FROM_${from}_2_0`],
        // @ts-ignore
        extractedMatrices[`MATRIX_${to}_FROM_${from}_2_1`],
        // @ts-ignore
        extractedMatrices[`MATRIX_${to}_FROM_${from}_2_2`],
    ]);

    addSquareMatrix(`${from}_FROM_${to}`, inverse(mat).to1DArray());
}

addRGBColorSpace("SRGB", "D65_2d");
addRGBColorSpace("ADOBE_RGB", "D65_2d");
addRGBColorSpace("DISPLAY_P3", "D65_2d");
addRGBColorSpace("REC_2020", "D65_2d");
addRGBColorSpace("PROPHOTO_RGB", "D65_2d");
addRGBColorSpace("NTSC", "C_2d");
addRGBColorSpace("SMPTE_C", "D65_2d");

addInverseMatrix("YIQ_FCC", "RGB");
addInverseMatrix("YIQ_1953", "RGB");
addInverseMatrix("YDbDr", "RGB");

await writeFile("./src/matrices/generated.ts", "// This file was automatically generated by precalculate.ts in the root of the repo." + constants
    .entries()
    .map(([id, value]) => `export const ${id} = ${JSON.stringify(value)};`)
    .reduce((a, b) => `${a}\n${b}`, ""));
