import {writeFile} from "node:fs/promises";
import Matrix, {inverse} from "ml-matrix";
import {
    toCIE1931XYZXFromCIE1931xyY,
    toCIE1931XYZZFromCIE1931xyY,
} from "../src/conversions/cie-1931-xyy";
import * as illuminants from "../src/illuminants";
import * as extractedMatrices from "../src/matrices/extracted";
import * as primaries from "../src/primaries";

const constants = new Map<string, number>();

const addSquareMatrix = (id: string, matrix: number[]) => {
    const n = Math.sqrt(matrix.length);

    for (let row = 0; row < n; row++) {
        for (let col = 0; col < n; col++) {
            constants.set(
                `MATRIX_${id}_${row}_${col}`,
                matrix[row * n + col] ?? 0,
            );
        }
    }
};

const calculateLinearRGBToCIE1931XYZMatrix = (
    red_x: number,
    red_y: number,
    green_x: number,
    green_y: number,
    blue_x: number,
    blue_y: number,
    illuminantx: number,
    illuminanty: number,
) => {
    const illuminantY = 1;
    const illuminantX = toCIE1931XYZXFromCIE1931xyY(
        illuminantx,
        illuminanty,
        illuminantY,
    );
    const illuminantZ = toCIE1931XYZZFromCIE1931xyY(
        illuminantx,
        illuminanty,
        illuminantY,
    );

    const red_X = toCIE1931XYZXFromCIE1931xyY(red_x, red_y, 1);
    const red_Z = toCIE1931XYZZFromCIE1931xyY(red_x, red_y, 1);

    const green_X = toCIE1931XYZXFromCIE1931xyY(green_x, green_y, 1);
    const green_Z = toCIE1931XYZZFromCIE1931xyY(green_x, green_y, 1);

    const blue_X = toCIE1931XYZXFromCIE1931xyY(blue_x, blue_y, 1);
    const blue_Z = toCIE1931XYZZFromCIE1931xyY(blue_x, blue_y, 1);

    const primaries = new Matrix([
        [red_X, 1, red_Z],
        [green_X, 1, green_Z],
        [blue_X, 1, blue_Z],
    ]).transpose();

    const primariesInverse = inverse(primaries);

    const scaling = primariesInverse.mmul(
        new Matrix([[illuminantX], [illuminantY], [illuminantZ]]),
    );

    return primaries.mmul(
        new Matrix([
            [scaling.get(0, 0), 0, 0],
            [0, scaling.get(1, 0), 0],
            [0, 0, scaling.get(2, 0)],
        ]),
    );
};

const addInverseMatrix = (to: string, from: string) => {
    const mat = Matrix.from1DArray(3, 3, [
        // @ts-expect-error
        extractedMatrices[`MATRIX_${to}_FROM_${from}_0_0`],
        // @ts-expect-error
        extractedMatrices[`MATRIX_${to}_FROM_${from}_0_1`],
        // @ts-expect-error
        extractedMatrices[`MATRIX_${to}_FROM_${from}_0_2`],
        // @ts-expect-error
        extractedMatrices[`MATRIX_${to}_FROM_${from}_1_0`],
        // @ts-expect-error
        extractedMatrices[`MATRIX_${to}_FROM_${from}_1_1`],
        // @ts-expect-error
        extractedMatrices[`MATRIX_${to}_FROM_${from}_1_2`],
        // @ts-expect-error
        extractedMatrices[`MATRIX_${to}_FROM_${from}_2_0`],
        // @ts-expect-error
        extractedMatrices[`MATRIX_${to}_FROM_${from}_2_1`],
        // @ts-expect-error
        extractedMatrices[`MATRIX_${to}_FROM_${from}_2_2`],
    ]);

    addSquareMatrix(`${from}_FROM_${to}`, inverse(mat).to1DArray());
};

const fileTextToCIE1931XYZFromLinearRGBColorSpace = (
    uppercase: string,
    text: string,
    pascalcase: string,
) => `// This file was automatically generated by \`scripts/precalculate.ts\`.

import {
    MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_0_0,
    MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_0_1,
    MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_0_2,
    MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_1_0,
    MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_1_1,
    MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_1_2,
    MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_2_0,
    MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_2_1,
    MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_2_2,
} from "../../matrices";

/**
 * Calculates the X component of CIE 1931 XYZ from linear ${text}.
 *
 * @param r The red component of linear ${text}, typically in the range [0, 1].
 * @param g The green component of linear ${text}, typically in the range [0, 1].
 * @param b The blue component of linear ${text}, typically in the range [0, 1].
 *
 * @returns The X component of CIE 1931 XYZ.
 */
export const toCIE1931XYZXFromLinear${pascalcase} = (
    r: number,
    g: number,
    b: number,
) => r * MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_0_0
    + g * MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_0_1
    + b * MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_0_2;

/**
 * Calculates the Y component of CIE 1931 XYZ from linear ${text}.
 *
 * @param r The red component of linear ${text}, typically in the range [0, 1].
 * @param g The green component of linear ${text}, typically in the range [0, 1].
 * @param b The blue component of linear ${text}, typically in the range [0, 1].
 *
 * @returns The Y component of CIE 1931 XYZ.
 */
export const toCIE1931XYZYFromLinear${pascalcase} = (
    r: number,
    g: number,
    b: number,
) => r * MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_1_0
    + g * MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_1_1
    + b * MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_1_2;

/**
 * Calculates the Z component of CIE 1931 XYZ from linear ${text}.
 *
 * @param r The red component of linear ${text}, typically in the range [0, 1].
 * @param g The green component of linear ${text}, typically in the range [0, 1].
 * @param b The blue component of linear ${text}, typically in the range [0, 1].
 *
 * @returns The Z component of CIE 1931 XYZ.
 */
export const toCIE1931XYZZFromLinear${pascalcase} = (
    r: number,
    g: number,
    b: number,
) => r * MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_2_0
    + g * MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_2_1
    + b * MATRIX_CIE_1931_XYZ_FROM_LINEAR_${uppercase}_2_2;`;

const fileTextToLinearRGBColorSpaceFromCIE1931XYZ = (
    uppercase: string,
    text: string,
    pascalcase: string,
) => `// This file was generated by \`scripts/precalculate.ts\`.

import {clamp01} from "../../internal";
import {
    MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_0_0,
    MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_0_1,
    MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_0_2,
    MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_1_0,
    MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_1_1,
    MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_1_2,
    MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_2_0,
    MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_2_1,
    MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_2_2,
} from "../../matrices";

/**
 * Calculates the red component of linear ${text} from CIE 1931 XYZ.
 *
 * @param x The X component of CIE 1931 XYZ.
 * @param y The Y component of CIE 1931 XYZ.
 * @param z The Z component of CIE 1931 XYZ.
 *
 * @returns The red component of linear ${text}.
 */
export const toLinear${pascalcase}RFromCIE1931XYZ = (
    x: number,
    y: number,
    z: number,
) => clamp01(x * MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_0_0
    + y * MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_0_1
    + z * MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_0_2);

/**
 * Calculates the green component of linear ${text} from CIE 1931 XYZ.
 *
 * @param x The X component of CIE 1931 XYZ.
 * @param y The Y component of CIE 1931 XYZ.
 * @param z The Z component of CIE 1931 XYZ.
 *
 * @returns The green component of linear ${text}.
 */
export const toLinear${pascalcase}GFromCIE1931XYZ = (
    x: number,
    y: number,
    z: number,
) => clamp01(x * MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_1_0
    + y * MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_1_1
    + z * MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_1_2);

/**
 * Calculates the blue component of linear ${text} from CIE 1931 XYZ.
 *
 * @param x The X component of CIE 1931 XYZ.
 * @param y The Y component of CIE 1931 XYZ.
 * @param z The Z component of CIE 1931 XYZ.
 *
 * @returns The blue component of linear ${text}.
 */
export const toLinear${pascalcase}BFromCIE1931XYZ = (
    x: number,
    y: number,
    z: number,
) => clamp01(x * MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_2_0
    + y * MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_2_1
    + z * MATRIX_LINEAR_${uppercase}_FROM_CIE_1931_XYZ_2_2);`;

const addRGBColorSpace = async (
    illuminant: string,
    primariesId: string,
    uppercase: string,
    text: string,
    pascalcase: string,
    filecase: string,
) => {
    const linearRGBToCIE1931XYZMatrix = calculateLinearRGBToCIE1931XYZMatrix(
        // @ts-expect-error
        primaries[`PRIMARY_${primariesId}_RED_x`],
        // @ts-expect-error
        primaries[`PRIMARY_${primariesId}_RED_y`],
        // @ts-expect-error
        primaries[`PRIMARY_${primariesId}_GREEN_x`],
        // @ts-expect-error
        primaries[`PRIMARY_${primariesId}_GREEN_y`],
        // @ts-expect-error
        primaries[`PRIMARY_${primariesId}_BLUE_x`],
        // @ts-expect-error
        primaries[`PRIMARY_${primariesId}_BLUE_y`],
        // @ts-expect-error
        illuminants[`${illuminant}_x`],
        // @ts-expect-error
        illuminants[`${illuminant}_x`],
    );

    addSquareMatrix(
        `CIE_1931_XYZ_FROM_LINEAR_${uppercase}`,
        linearRGBToCIE1931XYZMatrix.to1DArray(),
    );
    addSquareMatrix(
        `LINEAR_${uppercase}_FROM_CIE_1931_XYZ`,
        inverse(linearRGBToCIE1931XYZMatrix).to1DArray(),
    );

    await Promise.all([
        writeFile(
            `./src/conversions/cie-1931-xyz/to-linear-${filecase}.ts`,
            fileTextToLinearRGBColorSpaceFromCIE1931XYZ(
                uppercase,
                text,
                pascalcase,
            ),
        ),
        writeFile(
            `./src/conversions/linear-rgb/${filecase}-to-cie-1931-xyz.ts`,
            fileTextToCIE1931XYZFromLinearRGBColorSpace(
                uppercase,
                text,
                pascalcase,
            ),
        ),
    ]);
};

// --------------------------------------------------------

await Promise.all([
    addRGBColorSpace(
        "CIE_ILLUMINANT_D65_2d",
        "SRGB",
        "SRGB",
        "sRGB",
        "SRGB",
        "srgb",
    ),
    addRGBColorSpace(
        "CIE_ILLUMINANT_D65_2d",
        "ADOBE_RGB",
        "ADOBE_RGB",
        "Adobe RGB",
        "AdobeRGB",
        "adobe-rgb",
    ),
    addRGBColorSpace(
        "ILLUMINANT_D63_2d",
        "DCI_P3",
        "DCI_P3",
        "DCI-P3",
        "DCIP3",
        "dci-p3",
    ),
    addRGBColorSpace(
        "CIE_ILLUMINANT_D60_2d",
        "DCI_P3",
        "DCI_P3_D60",
        'DCI-P3 "D60 sim"',
        "DCIP3D60",
        "dci-p3-d60",
    ),
    addRGBColorSpace(
        "CIE_ILLUMINANT_D65_2d",
        "DCI_P3",
        "DISPLAY_P3",
        "Display P3",
        "DisplayP3",
        "display-p3",
    ),
    addRGBColorSpace(
        "CIE_ILLUMINANT_D65_2d",
        "REC_2020",
        "REC_2020",
        "Rec. 2020",
        "Rec2020",
        "rec-2020",
    ),
    addRGBColorSpace(
        "CIE_ILLUMINANT_D50_2d",
        "PROPHOTO_RGB",
        "PROPHOTO_RGB",
        "ProPhoto RGB",
        "ProPhotoRGB",
        "prophoto-rgb",
    ),
    addRGBColorSpace(
        "CIE_ILLUMINANT_C_2d",
        "NTSC",
        "NTSC",
        "NTSC (1953)",
        "NTSC",
        "ntsc",
    ),
    addRGBColorSpace(
        "CIE_ILLUMINANT_D65_2d",
        "SMPTE_C",
        "SMPTE_C",
        "SMPTE C (1987)",
        "SMPTEC",
        "smpte-c",
    ),
]);

addInverseMatrix("YIQ_FCC", "RGB");
addInverseMatrix("YIQ_1953", "RGB");
addInverseMatrix("YDbDr", "RGB");

// --------------------------------------------------------

await writeFile(
    "./src/matrices/generated.ts",
    "// This file was automatically generated by `src-comptime/precalculate.ts` in the root of the repo.\n" +
        Array.from(constants.entries())
            .map(
                ([id, value]) =>
                    `export const ${id} = ${JSON.stringify(value)};`,
            )
            .reduce((a, b) => `${a}\n${b}`, ""),
);
